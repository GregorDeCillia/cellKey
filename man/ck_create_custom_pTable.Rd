% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ck_create_custom_pTable.R
\name{ck_create_custom_pTable}
\alias{ck_create_custom_pTable}
\title{Create a custom pTable}
\usage{
ck_create_custom_pTable(pTableSize = 70)
}
\arguments{
\item{pTableSize}{an integer specifying the number of columns for
the perturbation table}
}
\value{
an object of class \code{ptable} defined in the ptable-package.
}
\description{
This function allows to create a custom perturbation table (pTable) that
contains 256 rows and
\code{pTableSize} columns. Each cell of this perturbation table must be a
function that returns a single number. By default, each cell gets
initialized with a function that always returns \code{0}, so no perturbation
would be applied.
}
\details{
To actually modify a custom pTable, function
\code{\link{ck_update_custom_pTable}} needs to be used.
}
\examples{
# initialize
pt_custom <- ck_create_custom_pTable(pTableSize=50)

# modify
fn1 <- function() round(rnorm(1, mean = 5, sd = 10))
fn2 <- function() rpois(1, lambda=5)
fn3 <- function() return(1)
fn4 <- function() return(-1)

# fn1 provides perturbation values from a normal distribution
# with mean = 5 and sd = 10
# we use this for all cells
pt_custom <- ck_update_custom_pTable(pt_custom, fun = fn1)

# perturbation values from poisson-distribution with lambda = 5
# for some cells (rows)
pt_custom <- ck_update_custom_pTable(
  pTable = pt_custom,
  fun = fn2,
  cols = 1:5,
  rows = 1:20
)

# we can of course write functions, that return scalars, such
# as fn3() (always returns 1) or fn4() (always returns -1)
pt_custom <- ck_update_custom_pTable(
  pTable = pt_custom,
  fun = fn3,
  cols = 10:20
)
pt_custom <- ck_update_custom_pTable(
  pTable = pt_custom,
  fun = fn4,
  cols = 21:30
)

## see also the example in ?perturbTable
}
\author{
Bernhard Meindl
}
