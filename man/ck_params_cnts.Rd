% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ck_params_cnts.R
\name{ck_params_cnts}
\alias{ck_params_cnts}
\title{Create perturbation parameters for count variables}
\usage{
ck_params_cnts(D, V, js = 0, pstay = NULL, optim = 1, mono = TRUE,
  epsilon = 0.0000001)
}
\arguments{
\item{D}{perturbation parameter for maximum perturbation (scalar or vector)}

\item{V}{perturbation parameter for variance (scalar)}

\item{js}{treshold value for blocking of small frequencies (i.e. there won't occur
positive target frequencies below the treshold value)}

\item{pstay}{optional parameter to set}

\item{optim}{optimization parameter: \code{1} standard approach (default)}

\item{mono}{(logical) vector specifying optimization parameter for monotony condition}

\item{epsilon}{(double)}
}
\value{
an object suitable as input to \code{\link[=cellkey_pkg]{cellkey_pkg()}} for the perturbation
of counts and frequencies.
}
\description{
This function allows to generate required perturbation parameters that are used
to perturb count variables.
}
\examples{
x <- ck_create_testdata()

# create some 0/1 variables that should be perturbed later
x[, cnt_females := ifelse(sex == "male", 0, 1)]
x[, cnt_males := ifelse(sex == "male", 1, 0)]
x[, cnt_highincome := ifelse(income >= 9000, 1, 0)]

# create record keys
x$rkey <- ck_generate_rkeys(dat = x)

# define required inputs

# hierarchy with some bogus codes
d_sex <- hier_create(root = "Total", nodes = c("male", "female"))
d_sex <- hier_add(d_sex, root = "female", "f")
d_sex <- hier_add(d_sex, root = "male", "m")

d_age <- hier_create(root = "Total", nodes = paste0("age_group", 1:6))
d_age <- hier_add(d_age, root = "age_group1", "ag1a")
d_age <- hier_add(d_age, root = "age_group2", "ag2a")

# create a named list
dims <- list(sex = d_sex, age = d_age)
w <- "sampling_weight"
countvars <- c("cnt_females", "cnt_males", "cnt_highincome")
rkey <- "rkey"

# define the cell key object
tab <- ck_setup(
  x = x,
  rkey = 5,
  dims = dims,
  w = w,
  countvars = countvars)

# show some information about this table instance
print(tab) # identical with tab$print()

# add perturbation parameters for "total" variable
p_cnts1 <- ck_params_cnts(
  D = 5,
  V = 3,
  js = 2,
  pstay = 0.5,
  optim = 1,
  mono = TRUE)
tab$params_cnts_set(val = p_cnts1, v = "total")

# create alternative perturbation parameters
p_cnts2 <- ck_params_cnts(
  D = 8,
  V = 3,
  js = 2,
  pstay = 0.5,
  optim = 1,
  mono = TRUE)

# use it for the remaining variables#'
tab$params_cnts_set(val = p_cnts2, v = countvars)

# perturb a variable
tab$perturb(v = "total")

# multiple variables can be perturbed as well
tab$perturb(v = c("cnt_males", "cnt_highincome"))

# return results (weighted and unweighted)
tab$freqtab(v = c("total", "cnt_males"))

# only unweighted and perturbed unweighted counts
tab$freqtab(v = c("total", "cnt_males"), type = "unweighted")

# write to a file "outtab.csv" (.csv is automatically added to the path)
\dontrun{
tab$freqtab(v = c("total", "cnt_males"), path = "outtab")
}

# only weighted and perturbed weighted counts
tab$freqtab(v = c("total", "cnt_males"), type = "weighted")

# utility measures for a count variable
tab$measures_cnts(v = "total", exclude_zeros = TRUE)

# modifications for perturbed count variables
tab$mod_cnts()

# display a summary about utility measures
tab$summary()
}
\seealso{
This function uses functionality from package
\code{ptable} (https://github.com/sdcTools/ptable), expecially \code{\link[ptable:pt_create_pParams]{ptable::pt_create_pParams()}}
and \code{\link[ptable:pt_create_pTable]{ptable::pt_create_pTable()}}. More detailed information on the parameters
is available from the respective help-pages of these functions.
}
